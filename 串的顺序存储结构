
#include "stdafx.h"
#include <malloc.h>
#define Maxsize 100

typedef struct{
	char data[Maxsize];
	int length;
}SqString;

void StrAssign(SqString&s, char cstr[]) {
	int i;
	for (i = 0; cstr[i] != '\0'; i++)
		s.data[i] = cstr[i];
	s.length = i;
}

void DestroyStr(SqString&s) { }

void StrCopy(SqString&s, SqString t) {
	int i;
	for (i = 0; i < t.length; i++)
		s.data[i] = t.data[i];
	s.length = t.length;
}

bool StrEqual(SqString s, SqString t) {
	bool same;
	int i;
	if (s.length != t.length)
		same = false;
	for(i=0;i<t.length;i++)
		if (s.data[i] != t.data[i])
		{
			same = false;
			break;
		}
	return same;
}

int StrLength(SqString s) {
	return s.length;
}

SqString Concat(SqString s, SqString t) {
	SqString a;
	int i;
	a.length = s.length + t.length;
	for (i = 0; i < s.length; i++)
		a.data[i] = s.data[i];
	for (i = 0; i < t.length; i++)
		a.data[s.length + i] = t.data[i];
	return a;
}

SqString SubStr(SqString s, int i, int j) {
	int k;
	SqString str;
	str.length = 0;
	if (i <= 0 || i > s.length || j<0 || i + j - 1>s.length)
		return str;
	for (k = i - 1; k < i + j - 1; k++)
		str.data[k - i + 1] = s.data[k];
	str.length = j;
	return str;
}

SqString InsStr(SqString s1, int i, SqString s2) {
	int j = 0;
	SqString str;
	str.length = s1.length + s2.length;
	if (i <= 0 || i > s1.length + 1)
		return str;
	for (j = 0; j < i - 1; j++)
		str.data[j] = s1.data[j];
	for (j = 0; j < s2.length; j++)
		str.data[i - 1 + j] = s2.data[j];
	for (j = i - 1; j < s1.length; j++)
		str.data[j + s2.length] = s1.data[j];
	return str;

}

SqString DelStr(SqString s, int i, int j) {
	SqString str;
	str.length = 0;
	int k;
	if (i <= 0 || i > s.length || i + j - 1 > s.length)
		return str;
	for (k = 0; k < i - 1; k++)
		str.data[k] = s.data[k];
	for (k = i + j - 1; k < s.length; k++)
		str.data[k - j] = s.data[k];
	str.length = s.length - j;
	return str;
}

SqString RepStr(SqString s, int i, int j, SqString t) {
	int k;
	SqString str;
	str.length = 0;
	if (i <= 0 || i >= s.length || i + j - 1 > s.length)
		return str;
	for (k = 0; k < i - 1; k++)
		str.data[k] = s.data[k];
	for (k = 0; k < t.length; k++)
		str.data[i - 1 + k] = t.data[k];
	for (k = i + j - 1; k < s.length; k++)
		str.data[k + t.length - j] = s.data[k];
	str.length = s.length + t.length - j;
	return str;
}

void DispStr(SqString s) {
	int i;
	if (s.length > 0) {
		for (i = 0; i < s.length; i++)
			printf("%c", s.data[i]);
		printf("\n");

	}
}
